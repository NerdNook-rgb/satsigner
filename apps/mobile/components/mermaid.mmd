graph TD A[Start: getLinkWidth(sourceNode, targetNode, type)] --> B{Determine Node based on type}; B --> C{node.type === 'block' AND type === 'source'}; C -- Yes --> D[Calculate width: (targetNode.value / getTotalOutgoingValueFromBlock(node)) * LINK_BLOCK_MAX_WIDTH]; C -- No --> E{node.type === 'block' AND type === 'target'}; E -- Yes --> F[Calculate width: (sourceNode.value / getTotalIncomingValueForBlock(node)) * LINK_BLOCK_MAX_WIDTH]; E -- No --> G[Get nodeSats = node.value]; G --> H{Find connectedBlockNode}; H --> I{Is node source to connectedBlockNode?}; I -- Yes --> J[Calculate width: (nodeSats / getTotalIncomingValueForBlock(connectedBlockNode)) * LINK_MAX_WIDTH]; I -- No --> K[Calculate width: (nodeSats / getTotalOutgoingValueFromBlock(connectedBlockNode)) * LINK_MAX_WIDTH]; J --> L[Return calculatedWidth]; K --> L; D --> L; F --> L; L[End: Return width]; subgraph Helper Functions M[getTotalIncomingValueForBlock(blockNode)] N[getTotalOutgoingValueFromBlock(blockNode)] end H -- uses --> M; H -- uses --> N; I -- uses --> M; I -- uses --> N; D -- uses --> N; F -- uses --> M;
